import dbm
import shelve
from typing import Any, Generic, Protocol, TypeVar

KeyType = TypeVar("KeyType", contravariant=True)


class RepositoryProtocol(Protocol, Generic[KeyType]):
    def set(self, key: KeyType, value, node_name: str, **future_kwargs) -> None:
        """Set a key: value pair for the results cache"""

    def get(self, key: KeyType, node_name: str, **future_kwargs) -> Any:
        """Get a key: value pair from the results cache"""


class ShelveRepository(RepositoryProtocol):
    """{str | bytes: pickle} on disk"""

    def __init__(self, path: str = "."):
        self.path = path

    def open(self, **kwargs) -> None:
        self.cache = shelve.open(self.path, "c")

    def close(self, **kwargs) -> None:
        self.cache.close()

    def set(self, key, value, node_name, **kwargs) -> None:
        self.cache[key] = value

    def get(self, key, node_name, **kwargs) -> Any:
        return self.cache.get(key)


class dbmRepository(RepositoryProtocol):
    """{str | bytes: str | bytes} on disk"""

    def __init__(self, path: str = "."):
        self.path = path

    def open(self, **kwargs) -> None:
        self.cache = dbm.open(self.path, "c")

    def close(self, **kwargs) -> None:
        self.cache.close()

    def set(self, key, value, node_name, **kwargs) -> None:
        self.cache[key] = value

    def get(self, key, node_name, **kwargs) -> Any:
        result = self.cache.get(key)
        if result:
            result = result.decode()
        return result


# class MaterializerStore(RepositoryProtocol):
#     def __init__(self, materializers: dict, path: str = "."):
#         self.materializers = materializers

#     def set(self, key, value, node, **kwargs):

#         type_ = node_.type
#         saver_cls = resolve_adapter_class(
#             type_,
#             self.saver_classes,
#         )
#         if saver_cls is None:
#             raise InvalidDecoratorException(
#                 f"No saver class found for type: {type_} specified by "
#                 f"output type: {type_} in node: {node_to_save} generated by "
#                 f"function: {fn.__qualname__}."
#             )

#     def get(self, key, node, **kwargs):
#         pass
